module Semantics.SectionTwoEq where

open import Semantics.Univ
open import Semantics.Groupoid
open import Semantics.FibrationZero
open import Semantics.FibrationOne
open import Semantics.FibrationTwo
open import Semantics.SectionTwo

EQ₂ : ∀ {G H K} → Section₂ {G} H → Section₂ (Fibration-Eq₂ H K) → Section₂ K → Fibration₁ G
EQ₂ s e t = record {
  Fibre = λ x → eq₂ (Section₂.vertex s x) (Section₂.vertex e x) (Section₂.vertex t x) ;
  Fibre-cong = λ p → eq₂-cong (Section₂.path s p) (Section₂.path e p) (Section₂.path t p);
  Fibre-cong₂ = λ fill → eq₂-cong₂ (Section₂.face s fill) (Section₂.face e fill) (Section₂.face t fill) }

EQ₂-cong : ∀ {G H H' K K'}
  (s : Section₂ {G} H) (s' : Section₂ H')
  (t : Section₂ K) (t' : Section₂ K')
  {e : Section₂ (Fibration-Eq₂ H K)} {e' : Section₂ (Fibration-Eq₂ H' K')}
  {H* : Section₂ (Fibration-Eq₂ H H')} {K* : Section₂ (Fibration-Eq₂ K K')} →
  Section₁ (EQ₂ s H* s') → Section₁ (EQ₂ e (Fibration-Eq₂-cong H* K*) e') → Section₁ (EQ₂ t K* t') →
  Section₁ (Fibration-Eq₁ (EQ₂ s e t) (EQ₂ s' e' t'))
EQ₂-cong _ _ _ _ s* e* t* = record {
  vertex = λ x → eq₂-cong (Section₁.vertex s* x) (Section₁.vertex e* x) (Section₁.vertex t* x) ;
  edge = λ p → eq₂-cong₂ (Section₁.edge s* p) (Section₁.edge e* p) (Section₁.edge t* p) }

